// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/nullsploit01/iosync/ent/node"
	"github.com/nullsploit01/iosync/ent/nodeapikey"
)

// NodeApiKey is the model entity for the NodeApiKey schema.
type NodeApiKey struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// APIKey holds the value of the "api_key" field.
	APIKey string `json:"api_key,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// IsRevoked holds the value of the "is_revoked" field.
	IsRevoked bool `json:"is_revoked,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NodeApiKeyQuery when eager-loading is set.
	Edges         NodeApiKeyEdges `json:"edges"`
	node_api_keys *int
	selectValues  sql.SelectValues
}

// NodeApiKeyEdges holds the relations/edges for other nodes in the graph.
type NodeApiKeyEdges struct {
	// Node holds the value of the node edge.
	Node *Node `json:"node,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// NodeOrErr returns the Node value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NodeApiKeyEdges) NodeOrErr() (*Node, error) {
	if e.Node != nil {
		return e.Node, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: node.Label}
	}
	return nil, &NotLoadedError{edge: "node"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NodeApiKey) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case nodeapikey.FieldIsRevoked:
			values[i] = new(sql.NullBool)
		case nodeapikey.FieldID:
			values[i] = new(sql.NullInt64)
		case nodeapikey.FieldAPIKey, nodeapikey.FieldDescription:
			values[i] = new(sql.NullString)
		case nodeapikey.FieldCreatedAt, nodeapikey.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case nodeapikey.ForeignKeys[0]: // node_api_keys
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NodeApiKey fields.
func (nak *NodeApiKey) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case nodeapikey.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			nak.ID = int(value.Int64)
		case nodeapikey.FieldAPIKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_key", values[i])
			} else if value.Valid {
				nak.APIKey = value.String
			}
		case nodeapikey.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				nak.Description = value.String
			}
		case nodeapikey.FieldIsRevoked:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_revoked", values[i])
			} else if value.Valid {
				nak.IsRevoked = value.Bool
			}
		case nodeapikey.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				nak.CreatedAt = value.Time
			}
		case nodeapikey.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				nak.UpdatedAt = value.Time
			}
		case nodeapikey.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field node_api_keys", value)
			} else if value.Valid {
				nak.node_api_keys = new(int)
				*nak.node_api_keys = int(value.Int64)
			}
		default:
			nak.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the NodeApiKey.
// This includes values selected through modifiers, order, etc.
func (nak *NodeApiKey) Value(name string) (ent.Value, error) {
	return nak.selectValues.Get(name)
}

// QueryNode queries the "node" edge of the NodeApiKey entity.
func (nak *NodeApiKey) QueryNode() *NodeQuery {
	return NewNodeApiKeyClient(nak.config).QueryNode(nak)
}

// Update returns a builder for updating this NodeApiKey.
// Note that you need to call NodeApiKey.Unwrap() before calling this method if this NodeApiKey
// was returned from a transaction, and the transaction was committed or rolled back.
func (nak *NodeApiKey) Update() *NodeApiKeyUpdateOne {
	return NewNodeApiKeyClient(nak.config).UpdateOne(nak)
}

// Unwrap unwraps the NodeApiKey entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (nak *NodeApiKey) Unwrap() *NodeApiKey {
	_tx, ok := nak.config.driver.(*txDriver)
	if !ok {
		panic("ent: NodeApiKey is not a transactional entity")
	}
	nak.config.driver = _tx.drv
	return nak
}

// String implements the fmt.Stringer.
func (nak *NodeApiKey) String() string {
	var builder strings.Builder
	builder.WriteString("NodeApiKey(")
	builder.WriteString(fmt.Sprintf("id=%v, ", nak.ID))
	builder.WriteString("api_key=")
	builder.WriteString(nak.APIKey)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(nak.Description)
	builder.WriteString(", ")
	builder.WriteString("is_revoked=")
	builder.WriteString(fmt.Sprintf("%v", nak.IsRevoked))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(nak.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(nak.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NodeApiKeys is a parsable slice of NodeApiKey.
type NodeApiKeys []*NodeApiKey
