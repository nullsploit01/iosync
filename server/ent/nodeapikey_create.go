// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nullsploit01/iosync/ent/node"
	"github.com/nullsploit01/iosync/ent/nodeapikey"
	"github.com/nullsploit01/iosync/ent/nodevalues"
)

// NodeApiKeyCreate is the builder for creating a NodeApiKey entity.
type NodeApiKeyCreate struct {
	config
	mutation *NodeApiKeyMutation
	hooks    []Hook
}

// SetAPIKey sets the "api_key" field.
func (nakc *NodeApiKeyCreate) SetAPIKey(s string) *NodeApiKeyCreate {
	nakc.mutation.SetAPIKey(s)
	return nakc
}

// SetDescription sets the "description" field.
func (nakc *NodeApiKeyCreate) SetDescription(s string) *NodeApiKeyCreate {
	nakc.mutation.SetDescription(s)
	return nakc
}

// SetIsRevoked sets the "is_revoked" field.
func (nakc *NodeApiKeyCreate) SetIsRevoked(b bool) *NodeApiKeyCreate {
	nakc.mutation.SetIsRevoked(b)
	return nakc
}

// SetNillableIsRevoked sets the "is_revoked" field if the given value is not nil.
func (nakc *NodeApiKeyCreate) SetNillableIsRevoked(b *bool) *NodeApiKeyCreate {
	if b != nil {
		nakc.SetIsRevoked(*b)
	}
	return nakc
}

// SetCreatedAt sets the "created_at" field.
func (nakc *NodeApiKeyCreate) SetCreatedAt(t time.Time) *NodeApiKeyCreate {
	nakc.mutation.SetCreatedAt(t)
	return nakc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nakc *NodeApiKeyCreate) SetNillableCreatedAt(t *time.Time) *NodeApiKeyCreate {
	if t != nil {
		nakc.SetCreatedAt(*t)
	}
	return nakc
}

// SetUpdatedAt sets the "updated_at" field.
func (nakc *NodeApiKeyCreate) SetUpdatedAt(t time.Time) *NodeApiKeyCreate {
	nakc.mutation.SetUpdatedAt(t)
	return nakc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (nakc *NodeApiKeyCreate) SetNillableUpdatedAt(t *time.Time) *NodeApiKeyCreate {
	if t != nil {
		nakc.SetUpdatedAt(*t)
	}
	return nakc
}

// SetNodeID sets the "node" edge to the Node entity by ID.
func (nakc *NodeApiKeyCreate) SetNodeID(id int) *NodeApiKeyCreate {
	nakc.mutation.SetNodeID(id)
	return nakc
}

// SetNillableNodeID sets the "node" edge to the Node entity by ID if the given value is not nil.
func (nakc *NodeApiKeyCreate) SetNillableNodeID(id *int) *NodeApiKeyCreate {
	if id != nil {
		nakc = nakc.SetNodeID(*id)
	}
	return nakc
}

// SetNode sets the "node" edge to the Node entity.
func (nakc *NodeApiKeyCreate) SetNode(n *Node) *NodeApiKeyCreate {
	return nakc.SetNodeID(n.ID)
}

// AddValueIDs adds the "values" edge to the NodeValues entity by IDs.
func (nakc *NodeApiKeyCreate) AddValueIDs(ids ...int) *NodeApiKeyCreate {
	nakc.mutation.AddValueIDs(ids...)
	return nakc
}

// AddValues adds the "values" edges to the NodeValues entity.
func (nakc *NodeApiKeyCreate) AddValues(n ...*NodeValues) *NodeApiKeyCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nakc.AddValueIDs(ids...)
}

// Mutation returns the NodeApiKeyMutation object of the builder.
func (nakc *NodeApiKeyCreate) Mutation() *NodeApiKeyMutation {
	return nakc.mutation
}

// Save creates the NodeApiKey in the database.
func (nakc *NodeApiKeyCreate) Save(ctx context.Context) (*NodeApiKey, error) {
	nakc.defaults()
	return withHooks(ctx, nakc.sqlSave, nakc.mutation, nakc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nakc *NodeApiKeyCreate) SaveX(ctx context.Context) *NodeApiKey {
	v, err := nakc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nakc *NodeApiKeyCreate) Exec(ctx context.Context) error {
	_, err := nakc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nakc *NodeApiKeyCreate) ExecX(ctx context.Context) {
	if err := nakc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nakc *NodeApiKeyCreate) defaults() {
	if _, ok := nakc.mutation.IsRevoked(); !ok {
		v := nodeapikey.DefaultIsRevoked
		nakc.mutation.SetIsRevoked(v)
	}
	if _, ok := nakc.mutation.CreatedAt(); !ok {
		v := nodeapikey.DefaultCreatedAt()
		nakc.mutation.SetCreatedAt(v)
	}
	if _, ok := nakc.mutation.UpdatedAt(); !ok {
		v := nodeapikey.DefaultUpdatedAt()
		nakc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nakc *NodeApiKeyCreate) check() error {
	if _, ok := nakc.mutation.APIKey(); !ok {
		return &ValidationError{Name: "api_key", err: errors.New(`ent: missing required field "NodeApiKey.api_key"`)}
	}
	if _, ok := nakc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "NodeApiKey.description"`)}
	}
	if _, ok := nakc.mutation.IsRevoked(); !ok {
		return &ValidationError{Name: "is_revoked", err: errors.New(`ent: missing required field "NodeApiKey.is_revoked"`)}
	}
	if _, ok := nakc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "NodeApiKey.created_at"`)}
	}
	if _, ok := nakc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "NodeApiKey.updated_at"`)}
	}
	return nil
}

func (nakc *NodeApiKeyCreate) sqlSave(ctx context.Context) (*NodeApiKey, error) {
	if err := nakc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nakc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nakc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	nakc.mutation.id = &_node.ID
	nakc.mutation.done = true
	return _node, nil
}

func (nakc *NodeApiKeyCreate) createSpec() (*NodeApiKey, *sqlgraph.CreateSpec) {
	var (
		_node = &NodeApiKey{config: nakc.config}
		_spec = sqlgraph.NewCreateSpec(nodeapikey.Table, sqlgraph.NewFieldSpec(nodeapikey.FieldID, field.TypeInt))
	)
	if value, ok := nakc.mutation.APIKey(); ok {
		_spec.SetField(nodeapikey.FieldAPIKey, field.TypeString, value)
		_node.APIKey = value
	}
	if value, ok := nakc.mutation.Description(); ok {
		_spec.SetField(nodeapikey.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := nakc.mutation.IsRevoked(); ok {
		_spec.SetField(nodeapikey.FieldIsRevoked, field.TypeBool, value)
		_node.IsRevoked = value
	}
	if value, ok := nakc.mutation.CreatedAt(); ok {
		_spec.SetField(nodeapikey.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := nakc.mutation.UpdatedAt(); ok {
		_spec.SetField(nodeapikey.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := nakc.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nodeapikey.NodeTable,
			Columns: []string{nodeapikey.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.node_api_keys = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nakc.mutation.ValuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nodeapikey.ValuesTable,
			Columns: []string{nodeapikey.ValuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodevalues.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NodeApiKeyCreateBulk is the builder for creating many NodeApiKey entities in bulk.
type NodeApiKeyCreateBulk struct {
	config
	err      error
	builders []*NodeApiKeyCreate
}

// Save creates the NodeApiKey entities in the database.
func (nakcb *NodeApiKeyCreateBulk) Save(ctx context.Context) ([]*NodeApiKey, error) {
	if nakcb.err != nil {
		return nil, nakcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(nakcb.builders))
	nodes := make([]*NodeApiKey, len(nakcb.builders))
	mutators := make([]Mutator, len(nakcb.builders))
	for i := range nakcb.builders {
		func(i int, root context.Context) {
			builder := nakcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NodeApiKeyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nakcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nakcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nakcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nakcb *NodeApiKeyCreateBulk) SaveX(ctx context.Context) []*NodeApiKey {
	v, err := nakcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nakcb *NodeApiKeyCreateBulk) Exec(ctx context.Context) error {
	_, err := nakcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nakcb *NodeApiKeyCreateBulk) ExecX(ctx context.Context) {
	if err := nakcb.Exec(ctx); err != nil {
		panic(err)
	}
}
