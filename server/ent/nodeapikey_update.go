// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nullsploit01/iosync/ent/node"
	"github.com/nullsploit01/iosync/ent/nodeapikey"
	"github.com/nullsploit01/iosync/ent/predicate"
)

// NodeApiKeyUpdate is the builder for updating NodeApiKey entities.
type NodeApiKeyUpdate struct {
	config
	hooks    []Hook
	mutation *NodeApiKeyMutation
}

// Where appends a list predicates to the NodeApiKeyUpdate builder.
func (naku *NodeApiKeyUpdate) Where(ps ...predicate.NodeApiKey) *NodeApiKeyUpdate {
	naku.mutation.Where(ps...)
	return naku
}

// SetAPIKey sets the "api_key" field.
func (naku *NodeApiKeyUpdate) SetAPIKey(s string) *NodeApiKeyUpdate {
	naku.mutation.SetAPIKey(s)
	return naku
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (naku *NodeApiKeyUpdate) SetNillableAPIKey(s *string) *NodeApiKeyUpdate {
	if s != nil {
		naku.SetAPIKey(*s)
	}
	return naku
}

// SetDescription sets the "description" field.
func (naku *NodeApiKeyUpdate) SetDescription(s string) *NodeApiKeyUpdate {
	naku.mutation.SetDescription(s)
	return naku
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (naku *NodeApiKeyUpdate) SetNillableDescription(s *string) *NodeApiKeyUpdate {
	if s != nil {
		naku.SetDescription(*s)
	}
	return naku
}

// SetIsRevoked sets the "is_revoked" field.
func (naku *NodeApiKeyUpdate) SetIsRevoked(b bool) *NodeApiKeyUpdate {
	naku.mutation.SetIsRevoked(b)
	return naku
}

// SetNillableIsRevoked sets the "is_revoked" field if the given value is not nil.
func (naku *NodeApiKeyUpdate) SetNillableIsRevoked(b *bool) *NodeApiKeyUpdate {
	if b != nil {
		naku.SetIsRevoked(*b)
	}
	return naku
}

// SetUpdatedAt sets the "updated_at" field.
func (naku *NodeApiKeyUpdate) SetUpdatedAt(t time.Time) *NodeApiKeyUpdate {
	naku.mutation.SetUpdatedAt(t)
	return naku
}

// SetNodeID sets the "node" edge to the Node entity by ID.
func (naku *NodeApiKeyUpdate) SetNodeID(id int) *NodeApiKeyUpdate {
	naku.mutation.SetNodeID(id)
	return naku
}

// SetNillableNodeID sets the "node" edge to the Node entity by ID if the given value is not nil.
func (naku *NodeApiKeyUpdate) SetNillableNodeID(id *int) *NodeApiKeyUpdate {
	if id != nil {
		naku = naku.SetNodeID(*id)
	}
	return naku
}

// SetNode sets the "node" edge to the Node entity.
func (naku *NodeApiKeyUpdate) SetNode(n *Node) *NodeApiKeyUpdate {
	return naku.SetNodeID(n.ID)
}

// Mutation returns the NodeApiKeyMutation object of the builder.
func (naku *NodeApiKeyUpdate) Mutation() *NodeApiKeyMutation {
	return naku.mutation
}

// ClearNode clears the "node" edge to the Node entity.
func (naku *NodeApiKeyUpdate) ClearNode() *NodeApiKeyUpdate {
	naku.mutation.ClearNode()
	return naku
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (naku *NodeApiKeyUpdate) Save(ctx context.Context) (int, error) {
	naku.defaults()
	return withHooks(ctx, naku.sqlSave, naku.mutation, naku.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (naku *NodeApiKeyUpdate) SaveX(ctx context.Context) int {
	affected, err := naku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (naku *NodeApiKeyUpdate) Exec(ctx context.Context) error {
	_, err := naku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (naku *NodeApiKeyUpdate) ExecX(ctx context.Context) {
	if err := naku.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (naku *NodeApiKeyUpdate) defaults() {
	if _, ok := naku.mutation.UpdatedAt(); !ok {
		v := nodeapikey.UpdateDefaultUpdatedAt()
		naku.mutation.SetUpdatedAt(v)
	}
}

func (naku *NodeApiKeyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(nodeapikey.Table, nodeapikey.Columns, sqlgraph.NewFieldSpec(nodeapikey.FieldID, field.TypeInt))
	if ps := naku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := naku.mutation.APIKey(); ok {
		_spec.SetField(nodeapikey.FieldAPIKey, field.TypeString, value)
	}
	if value, ok := naku.mutation.Description(); ok {
		_spec.SetField(nodeapikey.FieldDescription, field.TypeString, value)
	}
	if value, ok := naku.mutation.IsRevoked(); ok {
		_spec.SetField(nodeapikey.FieldIsRevoked, field.TypeBool, value)
	}
	if value, ok := naku.mutation.UpdatedAt(); ok {
		_spec.SetField(nodeapikey.FieldUpdatedAt, field.TypeTime, value)
	}
	if naku.mutation.NodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nodeapikey.NodeTable,
			Columns: []string{nodeapikey.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := naku.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nodeapikey.NodeTable,
			Columns: []string{nodeapikey.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, naku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nodeapikey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	naku.mutation.done = true
	return n, nil
}

// NodeApiKeyUpdateOne is the builder for updating a single NodeApiKey entity.
type NodeApiKeyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NodeApiKeyMutation
}

// SetAPIKey sets the "api_key" field.
func (nakuo *NodeApiKeyUpdateOne) SetAPIKey(s string) *NodeApiKeyUpdateOne {
	nakuo.mutation.SetAPIKey(s)
	return nakuo
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (nakuo *NodeApiKeyUpdateOne) SetNillableAPIKey(s *string) *NodeApiKeyUpdateOne {
	if s != nil {
		nakuo.SetAPIKey(*s)
	}
	return nakuo
}

// SetDescription sets the "description" field.
func (nakuo *NodeApiKeyUpdateOne) SetDescription(s string) *NodeApiKeyUpdateOne {
	nakuo.mutation.SetDescription(s)
	return nakuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nakuo *NodeApiKeyUpdateOne) SetNillableDescription(s *string) *NodeApiKeyUpdateOne {
	if s != nil {
		nakuo.SetDescription(*s)
	}
	return nakuo
}

// SetIsRevoked sets the "is_revoked" field.
func (nakuo *NodeApiKeyUpdateOne) SetIsRevoked(b bool) *NodeApiKeyUpdateOne {
	nakuo.mutation.SetIsRevoked(b)
	return nakuo
}

// SetNillableIsRevoked sets the "is_revoked" field if the given value is not nil.
func (nakuo *NodeApiKeyUpdateOne) SetNillableIsRevoked(b *bool) *NodeApiKeyUpdateOne {
	if b != nil {
		nakuo.SetIsRevoked(*b)
	}
	return nakuo
}

// SetUpdatedAt sets the "updated_at" field.
func (nakuo *NodeApiKeyUpdateOne) SetUpdatedAt(t time.Time) *NodeApiKeyUpdateOne {
	nakuo.mutation.SetUpdatedAt(t)
	return nakuo
}

// SetNodeID sets the "node" edge to the Node entity by ID.
func (nakuo *NodeApiKeyUpdateOne) SetNodeID(id int) *NodeApiKeyUpdateOne {
	nakuo.mutation.SetNodeID(id)
	return nakuo
}

// SetNillableNodeID sets the "node" edge to the Node entity by ID if the given value is not nil.
func (nakuo *NodeApiKeyUpdateOne) SetNillableNodeID(id *int) *NodeApiKeyUpdateOne {
	if id != nil {
		nakuo = nakuo.SetNodeID(*id)
	}
	return nakuo
}

// SetNode sets the "node" edge to the Node entity.
func (nakuo *NodeApiKeyUpdateOne) SetNode(n *Node) *NodeApiKeyUpdateOne {
	return nakuo.SetNodeID(n.ID)
}

// Mutation returns the NodeApiKeyMutation object of the builder.
func (nakuo *NodeApiKeyUpdateOne) Mutation() *NodeApiKeyMutation {
	return nakuo.mutation
}

// ClearNode clears the "node" edge to the Node entity.
func (nakuo *NodeApiKeyUpdateOne) ClearNode() *NodeApiKeyUpdateOne {
	nakuo.mutation.ClearNode()
	return nakuo
}

// Where appends a list predicates to the NodeApiKeyUpdate builder.
func (nakuo *NodeApiKeyUpdateOne) Where(ps ...predicate.NodeApiKey) *NodeApiKeyUpdateOne {
	nakuo.mutation.Where(ps...)
	return nakuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nakuo *NodeApiKeyUpdateOne) Select(field string, fields ...string) *NodeApiKeyUpdateOne {
	nakuo.fields = append([]string{field}, fields...)
	return nakuo
}

// Save executes the query and returns the updated NodeApiKey entity.
func (nakuo *NodeApiKeyUpdateOne) Save(ctx context.Context) (*NodeApiKey, error) {
	nakuo.defaults()
	return withHooks(ctx, nakuo.sqlSave, nakuo.mutation, nakuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nakuo *NodeApiKeyUpdateOne) SaveX(ctx context.Context) *NodeApiKey {
	node, err := nakuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nakuo *NodeApiKeyUpdateOne) Exec(ctx context.Context) error {
	_, err := nakuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nakuo *NodeApiKeyUpdateOne) ExecX(ctx context.Context) {
	if err := nakuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nakuo *NodeApiKeyUpdateOne) defaults() {
	if _, ok := nakuo.mutation.UpdatedAt(); !ok {
		v := nodeapikey.UpdateDefaultUpdatedAt()
		nakuo.mutation.SetUpdatedAt(v)
	}
}

func (nakuo *NodeApiKeyUpdateOne) sqlSave(ctx context.Context) (_node *NodeApiKey, err error) {
	_spec := sqlgraph.NewUpdateSpec(nodeapikey.Table, nodeapikey.Columns, sqlgraph.NewFieldSpec(nodeapikey.FieldID, field.TypeInt))
	id, ok := nakuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NodeApiKey.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nakuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, nodeapikey.FieldID)
		for _, f := range fields {
			if !nodeapikey.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != nodeapikey.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nakuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nakuo.mutation.APIKey(); ok {
		_spec.SetField(nodeapikey.FieldAPIKey, field.TypeString, value)
	}
	if value, ok := nakuo.mutation.Description(); ok {
		_spec.SetField(nodeapikey.FieldDescription, field.TypeString, value)
	}
	if value, ok := nakuo.mutation.IsRevoked(); ok {
		_spec.SetField(nodeapikey.FieldIsRevoked, field.TypeBool, value)
	}
	if value, ok := nakuo.mutation.UpdatedAt(); ok {
		_spec.SetField(nodeapikey.FieldUpdatedAt, field.TypeTime, value)
	}
	if nakuo.mutation.NodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nodeapikey.NodeTable,
			Columns: []string{nodeapikey.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nakuo.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nodeapikey.NodeTable,
			Columns: []string{nodeapikey.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NodeApiKey{config: nakuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nakuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nodeapikey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nakuo.mutation.done = true
	return _node, nil
}
