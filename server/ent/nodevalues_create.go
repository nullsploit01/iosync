// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nullsploit01/iosync/ent/nodeapikey"
	"github.com/nullsploit01/iosync/ent/nodevalues"
)

// NodeValuesCreate is the builder for creating a NodeValues entity.
type NodeValuesCreate struct {
	config
	mutation *NodeValuesMutation
	hooks    []Hook
}

// SetValue sets the "value" field.
func (nvc *NodeValuesCreate) SetValue(s string) *NodeValuesCreate {
	nvc.mutation.SetValue(s)
	return nvc
}

// SetCreatedAt sets the "created_at" field.
func (nvc *NodeValuesCreate) SetCreatedAt(t time.Time) *NodeValuesCreate {
	nvc.mutation.SetCreatedAt(t)
	return nvc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nvc *NodeValuesCreate) SetNillableCreatedAt(t *time.Time) *NodeValuesCreate {
	if t != nil {
		nvc.SetCreatedAt(*t)
	}
	return nvc
}

// SetUpdatedAt sets the "updated_at" field.
func (nvc *NodeValuesCreate) SetUpdatedAt(t time.Time) *NodeValuesCreate {
	nvc.mutation.SetUpdatedAt(t)
	return nvc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (nvc *NodeValuesCreate) SetNillableUpdatedAt(t *time.Time) *NodeValuesCreate {
	if t != nil {
		nvc.SetUpdatedAt(*t)
	}
	return nvc
}

// SetNodeAPIKeyID sets the "node_api_key" edge to the NodeApiKey entity by ID.
func (nvc *NodeValuesCreate) SetNodeAPIKeyID(id int) *NodeValuesCreate {
	nvc.mutation.SetNodeAPIKeyID(id)
	return nvc
}

// SetNillableNodeAPIKeyID sets the "node_api_key" edge to the NodeApiKey entity by ID if the given value is not nil.
func (nvc *NodeValuesCreate) SetNillableNodeAPIKeyID(id *int) *NodeValuesCreate {
	if id != nil {
		nvc = nvc.SetNodeAPIKeyID(*id)
	}
	return nvc
}

// SetNodeAPIKey sets the "node_api_key" edge to the NodeApiKey entity.
func (nvc *NodeValuesCreate) SetNodeAPIKey(n *NodeApiKey) *NodeValuesCreate {
	return nvc.SetNodeAPIKeyID(n.ID)
}

// Mutation returns the NodeValuesMutation object of the builder.
func (nvc *NodeValuesCreate) Mutation() *NodeValuesMutation {
	return nvc.mutation
}

// Save creates the NodeValues in the database.
func (nvc *NodeValuesCreate) Save(ctx context.Context) (*NodeValues, error) {
	nvc.defaults()
	return withHooks(ctx, nvc.sqlSave, nvc.mutation, nvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nvc *NodeValuesCreate) SaveX(ctx context.Context) *NodeValues {
	v, err := nvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nvc *NodeValuesCreate) Exec(ctx context.Context) error {
	_, err := nvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nvc *NodeValuesCreate) ExecX(ctx context.Context) {
	if err := nvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nvc *NodeValuesCreate) defaults() {
	if _, ok := nvc.mutation.CreatedAt(); !ok {
		v := nodevalues.DefaultCreatedAt()
		nvc.mutation.SetCreatedAt(v)
	}
	if _, ok := nvc.mutation.UpdatedAt(); !ok {
		v := nodevalues.DefaultUpdatedAt()
		nvc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nvc *NodeValuesCreate) check() error {
	if _, ok := nvc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "NodeValues.value"`)}
	}
	if _, ok := nvc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "NodeValues.created_at"`)}
	}
	if _, ok := nvc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "NodeValues.updated_at"`)}
	}
	return nil
}

func (nvc *NodeValuesCreate) sqlSave(ctx context.Context) (*NodeValues, error) {
	if err := nvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	nvc.mutation.id = &_node.ID
	nvc.mutation.done = true
	return _node, nil
}

func (nvc *NodeValuesCreate) createSpec() (*NodeValues, *sqlgraph.CreateSpec) {
	var (
		_node = &NodeValues{config: nvc.config}
		_spec = sqlgraph.NewCreateSpec(nodevalues.Table, sqlgraph.NewFieldSpec(nodevalues.FieldID, field.TypeInt))
	)
	if value, ok := nvc.mutation.Value(); ok {
		_spec.SetField(nodevalues.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if value, ok := nvc.mutation.CreatedAt(); ok {
		_spec.SetField(nodevalues.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := nvc.mutation.UpdatedAt(); ok {
		_spec.SetField(nodevalues.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := nvc.mutation.NodeAPIKeyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nodevalues.NodeAPIKeyTable,
			Columns: []string{nodevalues.NodeAPIKeyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodeapikey.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.node_api_key_values = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NodeValuesCreateBulk is the builder for creating many NodeValues entities in bulk.
type NodeValuesCreateBulk struct {
	config
	err      error
	builders []*NodeValuesCreate
}

// Save creates the NodeValues entities in the database.
func (nvcb *NodeValuesCreateBulk) Save(ctx context.Context) ([]*NodeValues, error) {
	if nvcb.err != nil {
		return nil, nvcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(nvcb.builders))
	nodes := make([]*NodeValues, len(nvcb.builders))
	mutators := make([]Mutator, len(nvcb.builders))
	for i := range nvcb.builders {
		func(i int, root context.Context) {
			builder := nvcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NodeValuesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nvcb *NodeValuesCreateBulk) SaveX(ctx context.Context) []*NodeValues {
	v, err := nvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nvcb *NodeValuesCreateBulk) Exec(ctx context.Context) error {
	_, err := nvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nvcb *NodeValuesCreateBulk) ExecX(ctx context.Context) {
	if err := nvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
