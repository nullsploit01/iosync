// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/nullsploit01/iosync/ent/node"
	"github.com/nullsploit01/iosync/ent/nodevalues"
)

// NodeValues is the model entity for the NodeValues schema.
type NodeValues struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NodeValuesQuery when eager-loading is set.
	Edges        NodeValuesEdges `json:"edges"`
	node_values  *int
	selectValues sql.SelectValues
}

// NodeValuesEdges holds the relations/edges for other nodes in the graph.
type NodeValuesEdges struct {
	// Node holds the value of the node edge.
	Node *Node `json:"node,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// NodeOrErr returns the Node value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NodeValuesEdges) NodeOrErr() (*Node, error) {
	if e.Node != nil {
		return e.Node, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: node.Label}
	}
	return nil, &NotLoadedError{edge: "node"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NodeValues) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case nodevalues.FieldID:
			values[i] = new(sql.NullInt64)
		case nodevalues.FieldValue:
			values[i] = new(sql.NullString)
		case nodevalues.FieldCreatedAt, nodevalues.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case nodevalues.ForeignKeys[0]: // node_values
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NodeValues fields.
func (nv *NodeValues) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case nodevalues.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			nv.ID = int(value.Int64)
		case nodevalues.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				nv.Value = value.String
			}
		case nodevalues.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				nv.CreatedAt = value.Time
			}
		case nodevalues.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				nv.UpdatedAt = value.Time
			}
		case nodevalues.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field node_values", value)
			} else if value.Valid {
				nv.node_values = new(int)
				*nv.node_values = int(value.Int64)
			}
		default:
			nv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the NodeValues.
// This includes values selected through modifiers, order, etc.
func (nv *NodeValues) GetValue(name string) (ent.Value, error) {
	return nv.selectValues.Get(name)
}

// QueryNode queries the "node" edge of the NodeValues entity.
func (nv *NodeValues) QueryNode() *NodeQuery {
	return NewNodeValuesClient(nv.config).QueryNode(nv)
}

// Update returns a builder for updating this NodeValues.
// Note that you need to call NodeValues.Unwrap() before calling this method if this NodeValues
// was returned from a transaction, and the transaction was committed or rolled back.
func (nv *NodeValues) Update() *NodeValuesUpdateOne {
	return NewNodeValuesClient(nv.config).UpdateOne(nv)
}

// Unwrap unwraps the NodeValues entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (nv *NodeValues) Unwrap() *NodeValues {
	_tx, ok := nv.config.driver.(*txDriver)
	if !ok {
		panic("ent: NodeValues is not a transactional entity")
	}
	nv.config.driver = _tx.drv
	return nv
}

// String implements the fmt.Stringer.
func (nv *NodeValues) String() string {
	var builder strings.Builder
	builder.WriteString("NodeValues(")
	builder.WriteString(fmt.Sprintf("id=%v, ", nv.ID))
	builder.WriteString("value=")
	builder.WriteString(nv.Value)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(nv.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(nv.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NodeValuesSlice is a parsable slice of NodeValues.
type NodeValuesSlice []*NodeValues
