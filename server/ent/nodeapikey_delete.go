// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/nullsploit01/iosync/ent/nodeapikey"
	"github.com/nullsploit01/iosync/ent/predicate"
)

// NodeApiKeyDelete is the builder for deleting a NodeApiKey entity.
type NodeApiKeyDelete struct {
	config
	hooks    []Hook
	mutation *NodeApiKeyMutation
}

// Where appends a list predicates to the NodeApiKeyDelete builder.
func (nakd *NodeApiKeyDelete) Where(ps ...predicate.NodeApiKey) *NodeApiKeyDelete {
	nakd.mutation.Where(ps...)
	return nakd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (nakd *NodeApiKeyDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, nakd.sqlExec, nakd.mutation, nakd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (nakd *NodeApiKeyDelete) ExecX(ctx context.Context) int {
	n, err := nakd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (nakd *NodeApiKeyDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(nodeapikey.Table, sqlgraph.NewFieldSpec(nodeapikey.FieldID, field.TypeInt))
	if ps := nakd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, nakd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	nakd.mutation.done = true
	return affected, err
}

// NodeApiKeyDeleteOne is the builder for deleting a single NodeApiKey entity.
type NodeApiKeyDeleteOne struct {
	nakd *NodeApiKeyDelete
}

// Where appends a list predicates to the NodeApiKeyDelete builder.
func (nakdo *NodeApiKeyDeleteOne) Where(ps ...predicate.NodeApiKey) *NodeApiKeyDeleteOne {
	nakdo.nakd.mutation.Where(ps...)
	return nakdo
}

// Exec executes the deletion query.
func (nakdo *NodeApiKeyDeleteOne) Exec(ctx context.Context) error {
	n, err := nakdo.nakd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{nodeapikey.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (nakdo *NodeApiKeyDeleteOne) ExecX(ctx context.Context) {
	if err := nakdo.Exec(ctx); err != nil {
		panic(err)
	}
}
