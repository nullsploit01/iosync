// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"iosync/ent/apikeys"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ApiKeys is the model entity for the ApiKeys schema.
type ApiKeys struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// DeviceID holds the value of the "device_id" field.
	DeviceID int `json:"device_id,omitempty"`
	// LastUsed holds the value of the "last_used" field.
	LastUsed time.Time `json:"last_used,omitempty"`
	// IsActive holds the value of the "is_active" field.
	IsActive bool `json:"is_active,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ApiKeys) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case apikeys.FieldIsActive:
			values[i] = new(sql.NullBool)
		case apikeys.FieldID, apikeys.FieldDeviceID:
			values[i] = new(sql.NullInt64)
		case apikeys.FieldKey:
			values[i] = new(sql.NullString)
		case apikeys.FieldLastUsed, apikeys.FieldCreatedAt, apikeys.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ApiKeys fields.
func (ak *ApiKeys) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case apikeys.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ak.ID = int(value.Int64)
		case apikeys.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				ak.Key = value.String
			}
		case apikeys.FieldDeviceID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field device_id", values[i])
			} else if value.Valid {
				ak.DeviceID = int(value.Int64)
			}
		case apikeys.FieldLastUsed:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_used", values[i])
			} else if value.Valid {
				ak.LastUsed = value.Time
			}
		case apikeys.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				ak.IsActive = value.Bool
			}
		case apikeys.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ak.CreatedAt = value.Time
			}
		case apikeys.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ak.UpdatedAt = value.Time
			}
		default:
			ak.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ApiKeys.
// This includes values selected through modifiers, order, etc.
func (ak *ApiKeys) Value(name string) (ent.Value, error) {
	return ak.selectValues.Get(name)
}

// Update returns a builder for updating this ApiKeys.
// Note that you need to call ApiKeys.Unwrap() before calling this method if this ApiKeys
// was returned from a transaction, and the transaction was committed or rolled back.
func (ak *ApiKeys) Update() *ApiKeysUpdateOne {
	return NewApiKeysClient(ak.config).UpdateOne(ak)
}

// Unwrap unwraps the ApiKeys entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ak *ApiKeys) Unwrap() *ApiKeys {
	_tx, ok := ak.config.driver.(*txDriver)
	if !ok {
		panic("ent: ApiKeys is not a transactional entity")
	}
	ak.config.driver = _tx.drv
	return ak
}

// String implements the fmt.Stringer.
func (ak *ApiKeys) String() string {
	var builder strings.Builder
	builder.WriteString("ApiKeys(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ak.ID))
	builder.WriteString("key=")
	builder.WriteString(ak.Key)
	builder.WriteString(", ")
	builder.WriteString("device_id=")
	builder.WriteString(fmt.Sprintf("%v", ak.DeviceID))
	builder.WriteString(", ")
	builder.WriteString("last_used=")
	builder.WriteString(ak.LastUsed.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", ak.IsActive))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ak.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ak.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ApiKeysSlice is a parsable slice of ApiKeys.
type ApiKeysSlice []*ApiKeys
