// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"iosync/ent/apikeys"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ApiKeysCreate is the builder for creating a ApiKeys entity.
type ApiKeysCreate struct {
	config
	mutation *ApiKeysMutation
	hooks    []Hook
}

// SetKey sets the "key" field.
func (akc *ApiKeysCreate) SetKey(s string) *ApiKeysCreate {
	akc.mutation.SetKey(s)
	return akc
}

// SetDeviceID sets the "device_id" field.
func (akc *ApiKeysCreate) SetDeviceID(i int) *ApiKeysCreate {
	akc.mutation.SetDeviceID(i)
	return akc
}

// SetLastUsed sets the "last_used" field.
func (akc *ApiKeysCreate) SetLastUsed(t time.Time) *ApiKeysCreate {
	akc.mutation.SetLastUsed(t)
	return akc
}

// SetIsActive sets the "is_active" field.
func (akc *ApiKeysCreate) SetIsActive(b bool) *ApiKeysCreate {
	akc.mutation.SetIsActive(b)
	return akc
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (akc *ApiKeysCreate) SetNillableIsActive(b *bool) *ApiKeysCreate {
	if b != nil {
		akc.SetIsActive(*b)
	}
	return akc
}

// SetCreatedAt sets the "created_at" field.
func (akc *ApiKeysCreate) SetCreatedAt(t time.Time) *ApiKeysCreate {
	akc.mutation.SetCreatedAt(t)
	return akc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (akc *ApiKeysCreate) SetNillableCreatedAt(t *time.Time) *ApiKeysCreate {
	if t != nil {
		akc.SetCreatedAt(*t)
	}
	return akc
}

// SetUpdatedAt sets the "updated_at" field.
func (akc *ApiKeysCreate) SetUpdatedAt(t time.Time) *ApiKeysCreate {
	akc.mutation.SetUpdatedAt(t)
	return akc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (akc *ApiKeysCreate) SetNillableUpdatedAt(t *time.Time) *ApiKeysCreate {
	if t != nil {
		akc.SetUpdatedAt(*t)
	}
	return akc
}

// Mutation returns the ApiKeysMutation object of the builder.
func (akc *ApiKeysCreate) Mutation() *ApiKeysMutation {
	return akc.mutation
}

// Save creates the ApiKeys in the database.
func (akc *ApiKeysCreate) Save(ctx context.Context) (*ApiKeys, error) {
	akc.defaults()
	return withHooks(ctx, akc.sqlSave, akc.mutation, akc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (akc *ApiKeysCreate) SaveX(ctx context.Context) *ApiKeys {
	v, err := akc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (akc *ApiKeysCreate) Exec(ctx context.Context) error {
	_, err := akc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (akc *ApiKeysCreate) ExecX(ctx context.Context) {
	if err := akc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (akc *ApiKeysCreate) defaults() {
	if _, ok := akc.mutation.IsActive(); !ok {
		v := apikeys.DefaultIsActive
		akc.mutation.SetIsActive(v)
	}
	if _, ok := akc.mutation.CreatedAt(); !ok {
		v := apikeys.DefaultCreatedAt
		akc.mutation.SetCreatedAt(v)
	}
	if _, ok := akc.mutation.UpdatedAt(); !ok {
		v := apikeys.DefaultUpdatedAt
		akc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (akc *ApiKeysCreate) check() error {
	if _, ok := akc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "ApiKeys.key"`)}
	}
	if _, ok := akc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`ent: missing required field "ApiKeys.device_id"`)}
	}
	if _, ok := akc.mutation.LastUsed(); !ok {
		return &ValidationError{Name: "last_used", err: errors.New(`ent: missing required field "ApiKeys.last_used"`)}
	}
	if _, ok := akc.mutation.IsActive(); !ok {
		return &ValidationError{Name: "is_active", err: errors.New(`ent: missing required field "ApiKeys.is_active"`)}
	}
	if _, ok := akc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ApiKeys.created_at"`)}
	}
	if _, ok := akc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ApiKeys.updated_at"`)}
	}
	return nil
}

func (akc *ApiKeysCreate) sqlSave(ctx context.Context) (*ApiKeys, error) {
	if err := akc.check(); err != nil {
		return nil, err
	}
	_node, _spec := akc.createSpec()
	if err := sqlgraph.CreateNode(ctx, akc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	akc.mutation.id = &_node.ID
	akc.mutation.done = true
	return _node, nil
}

func (akc *ApiKeysCreate) createSpec() (*ApiKeys, *sqlgraph.CreateSpec) {
	var (
		_node = &ApiKeys{config: akc.config}
		_spec = sqlgraph.NewCreateSpec(apikeys.Table, sqlgraph.NewFieldSpec(apikeys.FieldID, field.TypeInt))
	)
	if value, ok := akc.mutation.Key(); ok {
		_spec.SetField(apikeys.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := akc.mutation.DeviceID(); ok {
		_spec.SetField(apikeys.FieldDeviceID, field.TypeInt, value)
		_node.DeviceID = value
	}
	if value, ok := akc.mutation.LastUsed(); ok {
		_spec.SetField(apikeys.FieldLastUsed, field.TypeTime, value)
		_node.LastUsed = value
	}
	if value, ok := akc.mutation.IsActive(); ok {
		_spec.SetField(apikeys.FieldIsActive, field.TypeBool, value)
		_node.IsActive = value
	}
	if value, ok := akc.mutation.CreatedAt(); ok {
		_spec.SetField(apikeys.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := akc.mutation.UpdatedAt(); ok {
		_spec.SetField(apikeys.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// ApiKeysCreateBulk is the builder for creating many ApiKeys entities in bulk.
type ApiKeysCreateBulk struct {
	config
	err      error
	builders []*ApiKeysCreate
}

// Save creates the ApiKeys entities in the database.
func (akcb *ApiKeysCreateBulk) Save(ctx context.Context) ([]*ApiKeys, error) {
	if akcb.err != nil {
		return nil, akcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(akcb.builders))
	nodes := make([]*ApiKeys, len(akcb.builders))
	mutators := make([]Mutator, len(akcb.builders))
	for i := range akcb.builders {
		func(i int, root context.Context) {
			builder := akcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ApiKeysMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, akcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, akcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, akcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (akcb *ApiKeysCreateBulk) SaveX(ctx context.Context) []*ApiKeys {
	v, err := akcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (akcb *ApiKeysCreateBulk) Exec(ctx context.Context) error {
	_, err := akcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (akcb *ApiKeysCreateBulk) ExecX(ctx context.Context) {
	if err := akcb.Exec(ctx); err != nil {
		panic(err)
	}
}
