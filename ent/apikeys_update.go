// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"iosync/ent/apikeys"
	"iosync/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ApiKeysUpdate is the builder for updating ApiKeys entities.
type ApiKeysUpdate struct {
	config
	hooks    []Hook
	mutation *ApiKeysMutation
}

// Where appends a list predicates to the ApiKeysUpdate builder.
func (aku *ApiKeysUpdate) Where(ps ...predicate.ApiKeys) *ApiKeysUpdate {
	aku.mutation.Where(ps...)
	return aku
}

// SetKey sets the "key" field.
func (aku *ApiKeysUpdate) SetKey(s string) *ApiKeysUpdate {
	aku.mutation.SetKey(s)
	return aku
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (aku *ApiKeysUpdate) SetNillableKey(s *string) *ApiKeysUpdate {
	if s != nil {
		aku.SetKey(*s)
	}
	return aku
}

// SetDeviceID sets the "device_id" field.
func (aku *ApiKeysUpdate) SetDeviceID(i int) *ApiKeysUpdate {
	aku.mutation.ResetDeviceID()
	aku.mutation.SetDeviceID(i)
	return aku
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (aku *ApiKeysUpdate) SetNillableDeviceID(i *int) *ApiKeysUpdate {
	if i != nil {
		aku.SetDeviceID(*i)
	}
	return aku
}

// AddDeviceID adds i to the "device_id" field.
func (aku *ApiKeysUpdate) AddDeviceID(i int) *ApiKeysUpdate {
	aku.mutation.AddDeviceID(i)
	return aku
}

// SetLastUsed sets the "last_used" field.
func (aku *ApiKeysUpdate) SetLastUsed(t time.Time) *ApiKeysUpdate {
	aku.mutation.SetLastUsed(t)
	return aku
}

// SetNillableLastUsed sets the "last_used" field if the given value is not nil.
func (aku *ApiKeysUpdate) SetNillableLastUsed(t *time.Time) *ApiKeysUpdate {
	if t != nil {
		aku.SetLastUsed(*t)
	}
	return aku
}

// SetIsActive sets the "is_active" field.
func (aku *ApiKeysUpdate) SetIsActive(b bool) *ApiKeysUpdate {
	aku.mutation.SetIsActive(b)
	return aku
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (aku *ApiKeysUpdate) SetNillableIsActive(b *bool) *ApiKeysUpdate {
	if b != nil {
		aku.SetIsActive(*b)
	}
	return aku
}

// SetCreatedAt sets the "created_at" field.
func (aku *ApiKeysUpdate) SetCreatedAt(t time.Time) *ApiKeysUpdate {
	aku.mutation.SetCreatedAt(t)
	return aku
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (aku *ApiKeysUpdate) SetNillableCreatedAt(t *time.Time) *ApiKeysUpdate {
	if t != nil {
		aku.SetCreatedAt(*t)
	}
	return aku
}

// SetUpdatedAt sets the "updated_at" field.
func (aku *ApiKeysUpdate) SetUpdatedAt(t time.Time) *ApiKeysUpdate {
	aku.mutation.SetUpdatedAt(t)
	return aku
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (aku *ApiKeysUpdate) SetNillableUpdatedAt(t *time.Time) *ApiKeysUpdate {
	if t != nil {
		aku.SetUpdatedAt(*t)
	}
	return aku
}

// Mutation returns the ApiKeysMutation object of the builder.
func (aku *ApiKeysUpdate) Mutation() *ApiKeysMutation {
	return aku.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aku *ApiKeysUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, aku.sqlSave, aku.mutation, aku.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aku *ApiKeysUpdate) SaveX(ctx context.Context) int {
	affected, err := aku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aku *ApiKeysUpdate) Exec(ctx context.Context) error {
	_, err := aku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aku *ApiKeysUpdate) ExecX(ctx context.Context) {
	if err := aku.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aku *ApiKeysUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(apikeys.Table, apikeys.Columns, sqlgraph.NewFieldSpec(apikeys.FieldID, field.TypeInt))
	if ps := aku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aku.mutation.Key(); ok {
		_spec.SetField(apikeys.FieldKey, field.TypeString, value)
	}
	if value, ok := aku.mutation.DeviceID(); ok {
		_spec.SetField(apikeys.FieldDeviceID, field.TypeInt, value)
	}
	if value, ok := aku.mutation.AddedDeviceID(); ok {
		_spec.AddField(apikeys.FieldDeviceID, field.TypeInt, value)
	}
	if value, ok := aku.mutation.LastUsed(); ok {
		_spec.SetField(apikeys.FieldLastUsed, field.TypeTime, value)
	}
	if value, ok := aku.mutation.IsActive(); ok {
		_spec.SetField(apikeys.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := aku.mutation.CreatedAt(); ok {
		_spec.SetField(apikeys.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := aku.mutation.UpdatedAt(); ok {
		_spec.SetField(apikeys.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apikeys.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aku.mutation.done = true
	return n, nil
}

// ApiKeysUpdateOne is the builder for updating a single ApiKeys entity.
type ApiKeysUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ApiKeysMutation
}

// SetKey sets the "key" field.
func (akuo *ApiKeysUpdateOne) SetKey(s string) *ApiKeysUpdateOne {
	akuo.mutation.SetKey(s)
	return akuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (akuo *ApiKeysUpdateOne) SetNillableKey(s *string) *ApiKeysUpdateOne {
	if s != nil {
		akuo.SetKey(*s)
	}
	return akuo
}

// SetDeviceID sets the "device_id" field.
func (akuo *ApiKeysUpdateOne) SetDeviceID(i int) *ApiKeysUpdateOne {
	akuo.mutation.ResetDeviceID()
	akuo.mutation.SetDeviceID(i)
	return akuo
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (akuo *ApiKeysUpdateOne) SetNillableDeviceID(i *int) *ApiKeysUpdateOne {
	if i != nil {
		akuo.SetDeviceID(*i)
	}
	return akuo
}

// AddDeviceID adds i to the "device_id" field.
func (akuo *ApiKeysUpdateOne) AddDeviceID(i int) *ApiKeysUpdateOne {
	akuo.mutation.AddDeviceID(i)
	return akuo
}

// SetLastUsed sets the "last_used" field.
func (akuo *ApiKeysUpdateOne) SetLastUsed(t time.Time) *ApiKeysUpdateOne {
	akuo.mutation.SetLastUsed(t)
	return akuo
}

// SetNillableLastUsed sets the "last_used" field if the given value is not nil.
func (akuo *ApiKeysUpdateOne) SetNillableLastUsed(t *time.Time) *ApiKeysUpdateOne {
	if t != nil {
		akuo.SetLastUsed(*t)
	}
	return akuo
}

// SetIsActive sets the "is_active" field.
func (akuo *ApiKeysUpdateOne) SetIsActive(b bool) *ApiKeysUpdateOne {
	akuo.mutation.SetIsActive(b)
	return akuo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (akuo *ApiKeysUpdateOne) SetNillableIsActive(b *bool) *ApiKeysUpdateOne {
	if b != nil {
		akuo.SetIsActive(*b)
	}
	return akuo
}

// SetCreatedAt sets the "created_at" field.
func (akuo *ApiKeysUpdateOne) SetCreatedAt(t time.Time) *ApiKeysUpdateOne {
	akuo.mutation.SetCreatedAt(t)
	return akuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (akuo *ApiKeysUpdateOne) SetNillableCreatedAt(t *time.Time) *ApiKeysUpdateOne {
	if t != nil {
		akuo.SetCreatedAt(*t)
	}
	return akuo
}

// SetUpdatedAt sets the "updated_at" field.
func (akuo *ApiKeysUpdateOne) SetUpdatedAt(t time.Time) *ApiKeysUpdateOne {
	akuo.mutation.SetUpdatedAt(t)
	return akuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (akuo *ApiKeysUpdateOne) SetNillableUpdatedAt(t *time.Time) *ApiKeysUpdateOne {
	if t != nil {
		akuo.SetUpdatedAt(*t)
	}
	return akuo
}

// Mutation returns the ApiKeysMutation object of the builder.
func (akuo *ApiKeysUpdateOne) Mutation() *ApiKeysMutation {
	return akuo.mutation
}

// Where appends a list predicates to the ApiKeysUpdate builder.
func (akuo *ApiKeysUpdateOne) Where(ps ...predicate.ApiKeys) *ApiKeysUpdateOne {
	akuo.mutation.Where(ps...)
	return akuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (akuo *ApiKeysUpdateOne) Select(field string, fields ...string) *ApiKeysUpdateOne {
	akuo.fields = append([]string{field}, fields...)
	return akuo
}

// Save executes the query and returns the updated ApiKeys entity.
func (akuo *ApiKeysUpdateOne) Save(ctx context.Context) (*ApiKeys, error) {
	return withHooks(ctx, akuo.sqlSave, akuo.mutation, akuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (akuo *ApiKeysUpdateOne) SaveX(ctx context.Context) *ApiKeys {
	node, err := akuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (akuo *ApiKeysUpdateOne) Exec(ctx context.Context) error {
	_, err := akuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (akuo *ApiKeysUpdateOne) ExecX(ctx context.Context) {
	if err := akuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (akuo *ApiKeysUpdateOne) sqlSave(ctx context.Context) (_node *ApiKeys, err error) {
	_spec := sqlgraph.NewUpdateSpec(apikeys.Table, apikeys.Columns, sqlgraph.NewFieldSpec(apikeys.FieldID, field.TypeInt))
	id, ok := akuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ApiKeys.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := akuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, apikeys.FieldID)
		for _, f := range fields {
			if !apikeys.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != apikeys.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := akuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := akuo.mutation.Key(); ok {
		_spec.SetField(apikeys.FieldKey, field.TypeString, value)
	}
	if value, ok := akuo.mutation.DeviceID(); ok {
		_spec.SetField(apikeys.FieldDeviceID, field.TypeInt, value)
	}
	if value, ok := akuo.mutation.AddedDeviceID(); ok {
		_spec.AddField(apikeys.FieldDeviceID, field.TypeInt, value)
	}
	if value, ok := akuo.mutation.LastUsed(); ok {
		_spec.SetField(apikeys.FieldLastUsed, field.TypeTime, value)
	}
	if value, ok := akuo.mutation.IsActive(); ok {
		_spec.SetField(apikeys.FieldIsActive, field.TypeBool, value)
	}
	if value, ok := akuo.mutation.CreatedAt(); ok {
		_spec.SetField(apikeys.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := akuo.mutation.UpdatedAt(); ok {
		_spec.SetField(apikeys.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &ApiKeys{config: akuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, akuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apikeys.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	akuo.mutation.done = true
	return _node, nil
}
